// Code generated by MockGen. DO NOT EDIT.
// Source: ./scooterRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	proto "scooter_micro/proto"

	gomock "github.com/golang/mock/gomock"
)

// MockScooterRepository is a mock of ScooterRepository interface.
type MockScooterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScooterRepositoryMockRecorder
}

// MockScooterRepositoryMockRecorder is the mock recorder for MockScooterRepository.
type MockScooterRepositoryMockRecorder struct {
	mock *MockScooterRepository
}

// NewMockScooterRepository creates a new mock instance.
func NewMockScooterRepository(ctrl *gomock.Controller) *MockScooterRepository {
	mock := &MockScooterRepository{ctrl: ctrl}
	mock.recorder = &MockScooterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScooterRepository) EXPECT() *MockScooterRepositoryMockRecorder {
	return m.recorder
}

// CreateScooterStatusInRent mocks base method.
func (m *MockScooterRepository) CreateScooterStatusInRent(context context.Context, id *proto.ScooterID) (*proto.ScooterStatusInRent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScooterStatusInRent", context, id)
	ret0, _ := ret[0].(*proto.ScooterStatusInRent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScooterStatusInRent indicates an expected call of CreateScooterStatusInRent.
func (mr *MockScooterRepositoryMockRecorder) CreateScooterStatusInRent(context, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScooterStatusInRent", reflect.TypeOf((*MockScooterRepository)(nil).CreateScooterStatusInRent), context, id)
}

// GetAllScooters mocks base method.
func (m *MockScooterRepository) GetAllScooters(ctx context.Context, request *proto.Request) (*proto.ScooterList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllScooters", ctx, request)
	ret0, _ := ret[0].(*proto.ScooterList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllScooters indicates an expected call of GetAllScooters.
func (mr *MockScooterRepositoryMockRecorder) GetAllScooters(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllScooters", reflect.TypeOf((*MockScooterRepository)(nil).GetAllScooters), ctx, request)
}

// GetAllScootersByStationID mocks base method.
func (m *MockScooterRepository) GetAllScootersByStationID(context context.Context, id *proto.StationID) (*proto.ScooterList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllScootersByStationID", context, id)
	ret0, _ := ret[0].(*proto.ScooterList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllScootersByStationID indicates an expected call of GetAllScootersByStationID.
func (mr *MockScooterRepositoryMockRecorder) GetAllScootersByStationID(context, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllScootersByStationID", reflect.TypeOf((*MockScooterRepository)(nil).GetAllScootersByStationID), context, id)
}

// GetAllStations mocks base method.
func (m *MockScooterRepository) GetAllStations(ctx context.Context, request *proto.Request) (*proto.StationList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStations", ctx, request)
	ret0, _ := ret[0].(*proto.StationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStations indicates an expected call of GetAllStations.
func (mr *MockScooterRepositoryMockRecorder) GetAllStations(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStations", reflect.TypeOf((*MockScooterRepository)(nil).GetAllStations), ctx, request)
}

// GetScooterById mocks base method.
func (m *MockScooterRepository) GetScooterById(context context.Context, id *proto.ScooterID) (*proto.Scooter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScooterById", context, id)
	ret0, _ := ret[0].(*proto.Scooter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScooterById indicates an expected call of GetScooterById.
func (mr *MockScooterRepositoryMockRecorder) GetScooterById(context, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScooterById", reflect.TypeOf((*MockScooterRepository)(nil).GetScooterById), context, id)
}

// GetScooterStatus mocks base method.
func (m *MockScooterRepository) GetScooterStatus(context context.Context, id *proto.ScooterID) (*proto.ScooterStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScooterStatus", context, id)
	ret0, _ := ret[0].(*proto.ScooterStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScooterStatus indicates an expected call of GetScooterStatus.
func (mr *MockScooterRepositoryMockRecorder) GetScooterStatus(context, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScooterStatus", reflect.TypeOf((*MockScooterRepository)(nil).GetScooterStatus), context, id)
}

// GetStationById mocks base method.
func (m *MockScooterRepository) GetStationById(ctx context.Context, id *proto.StationID) (*proto.Station, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStationById", ctx, id)
	ret0, _ := ret[0].(*proto.Station)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStationById indicates an expected call of GetStationById.
func (mr *MockScooterRepositoryMockRecorder) GetStationById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStationById", reflect.TypeOf((*MockScooterRepository)(nil).GetStationById), ctx, id)
}

// SendCurrentStatus mocks base method.
func (m *MockScooterRepository) SendCurrentStatus(context context.Context, status *proto.SendStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCurrentStatus", context, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCurrentStatus indicates an expected call of SendCurrentStatus.
func (mr *MockScooterRepositoryMockRecorder) SendCurrentStatus(context, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCurrentStatus", reflect.TypeOf((*MockScooterRepository)(nil).SendCurrentStatus), context, status)
}
